{% extends ':base:base.html.twig' %}

{% block title %}Writing Extensions{% endblock title %}

{% block phpbb_body_class %}mods{% endblock %}

{% block body %}
<div id="page-body">
	<ul class="linklist navlinks">
		<li><a href="{{ home_path }}">Home</a>
			<strong>&#8249;</strong> <a href="{{ customise_path }}">Customise phpBB</a>
			<strong>&#8249;</strong> <a href="{{ extensions_path }}">Extensions</a>
			<strong>&#8249;</strong> <a href="{{ extensions_writing }}">Writing Extensions</a>
		</li>
	</ul>

	<div id="main">
		<h2 class="imgrep mods">Writing Extensions</h2>
		<p>If you are an existing developer or a phpBB board owner thinking about learning PHP there has been no better time to get involved in the extensions community. The extensions system for edit-less changes in phpBB 3.1 "Ascraeus" makes customising phpBB easier than ever. Existing MOD developers will be glad to know that the best parts of phpBB development such as the powerful database abstraction layer, templating and language systems have been retained for phpBB 3.1, so the transition from writing MODs to extensions is a smooth one.</p>
		<p>Extensions are the natural successor to modifications (sometimes known as MODs), the development and support of which have defined the community's involvement in the phpBB project for over a decade. Unlike modifications, which often required a developer to alter the phpBB codebase to achieve a desired functionality, extensions enable a developer to develop new functionality for phpBB that is self-contained and void of actual code changes. As such, administrators wishing to include new functionality on their boards simply have to upload a set of files (the “extension”) to their webspace and do not have to concern themselves with editing any files.</p>
		<div class="note-box yellow"><strong>Note:</strong> This guide only applies to phpBB 3.1.x. For guides to older versions of phpBB (3.0.x), please visit the <a href="{{ MODS_KB }}">MODs knowledge base</a> or the <a href="{{ MODS_AUTHOR_INTRO }}">Introduction to MOD Writing</a>.</div>
		<div class="note-box green"><strong>Pro-Tip:</strong> The best way to learn how to create extensions is by learning from examples. Our <a href="{{ extensions_offical_exts }}">Official Extensions</a> are great examples to learn from. The <a href="{{ forum_extensions_31x_writers }}">[3.1.x] Extensions Writers</a> forum is also a great place to seek help and advice if you have any questions.</div>

		<hr />

		<h2 class="title" id="a-introduction">Introduction</h2>
		<p>The example detailed below will demonstrate how to write a basic extension that will add a new page to a board that will simply display “Hello world!” or “Goodbye world!” based on the option set in the ACP. This extension touches on all the basic principles that can apply to any other type of extension, including adding a front-controller page, modifying phpBB through core events and template events, modifying the database using migrations, and installing an ACP module with config settings for the extension.</p>
		<div class="note-box blue"><strong>Note:</strong> The extension referred to in this guide is the Acme Demo Extension by nickvergessen. It can be downloaded from its <a href="https://github.com/nickvergessen/phpbb-ext-acme-demo">Github Repository</a>.<br /><br /><img src="{{ asset('assets/images/images/extensions/skeleton.png') }}" width="20" height="20" style="vertical-align: middle;" alt="Extension Skeleton"> <a href="{{ extension_skeleton }}">Extension Skeleton</a> is a fantastic tool to help developers rapidly generate the starter files and components needed to start developing new extensions for phpBB.</div>

		<hr />

		<h2 class="title" id="a-packaging">Package Naming Conventions</h2>
		<p>All extensions will be located within the the <code class="inline">ext/</code> directory, located within the phpBB root (the same location as viewtopic.php, viewforum.php, index.php, etc).</p>
		<p>Extensions are packaged in a directory structure as follows: <code class="inline">vendorname/extensionname</code>.</p>
		<p>The vendorname could be your username or any other name you choose to associate your extensions with. The extensionname is the name of the extension. In the case of the Acme Demo extension examined here, it should look like <code class="inline">acme/demo</code>.</p>
		<div class="note-box yellow"><strong>Note:</strong> Due to internal logic inside the code, vendor and extension names may ONLY contain numbers and letters. Underscores, dashes, and other characters are NOT permitted.</div>

		<hr />

		<h2 class="title" id="a-composer">Composer</h2>
		<p>Once the extension package directory is created, a <code class="inline">composer.json</code> file needs to be constructed, and is required. This is a meta data file which details information specific to the extension, similar to the beginning section of a MODX file. The layout of a <code class="inline">composer.json</code> file is as follows:</p>
		<pre class="codesnippet">
{
   "name": "acme/demo",
   "type": "phpbb-extension",
   "description": "Acme Demo Extension for phpBB 3.1",
   "homepage": "https://github.com/nickvergessen/phpbb-ext-acme-demo",
   "version": "0.1.0",
   "time": "2013-11-05",
   "license": "GPL-2.0",
   "authors": [{
      "name": "Joas Schilling",
      "email": "nickvergessen@gmx.de",
      "homepage": "https://github.com/nickvergessen/",
      "role": "Lead Developer"
   }],
   "require": {
      "php": ">=5.3.3",
      "composer/installers": "~1.0"
   },
   "extra": {
      "display-name": "Acme Demo Extension",
      "soft-require" : {
         "phpbb/phpbb": ">=3.1.0-RC2,&lt;3.2.*@dev"
      }
   }
}</pre>
		<p>The information in this file will be used by the Extensions Manager. The Extensions Manager is an ACP feature that will allow extensions to be enabled, disabled or purged (meaning any database changes introduced by an extension will be reverted).</p>
		<div class="note-box blue"><strong>Resources:</strong><br />
			<a href="{{ extensions_docs_composer }}">Composer Tutorial</a><br />
			<a href="{{ extensions_wiki_composer }}">Composer &amp; Extension Meta Data Wiki</a><br />
			<a href="https://getcomposer.org/doc/04-schema.md">Composer Schema</a><br />
		</div>

		<hr />

		<h2 class="title" id="a-extend-base-class">Extending the Base Class With ext.php</h2>
		<p>Developers can extend the base class <code class="inline">\phpbb\extension\base</code> if they wish to by creating an <code class="inline">ext.php</code> file. Otherwise, an <code class="inline">ext.php</code> does not need to be created. The Acme Demo extension does not extend the base class, and generally this would not be required for most extensions. Extending the base class permits for custom code to be executed during the enabling, disabling or purging of an extension.</p>
		<p>For example, suppose an extension was to perform a unique action upon being enabled such as connecting to a web service and processing an XML dataset. This is easily achieved by overriding the <code class="inline">enable_step()</code> function.</p>
		<pre class="codesnippet">&lt;?php

namespace acme\demo;

class ext extends \phpbb\extension\base
{
   // override enable step
   function enable_step($old_state)
   {
      switch ($old_state)
      {
         case '':
            // Insert web service and XML processing logic here
            return 'webservice';
         break;

         default:
            // Run parent enable step method
            return parent::enable_step($old_state);
         break;
      }
   }
}</pre>
		<p>In the case of processing the XML dataset returned by the web service, the execution time could potentially be very large depending on the size of the dataset. The extension code in phpBB has a contingency for this; if the returned value from <code class="inline">enable_step()</code> is not false, then the returned value will be serialised and stored in the database.</p>
		<div class="note-box yellow"><strong>Note:</strong> The serialised data is stored in the phpbb_ext table under the ext_state field. Developers should never manipulate this field directly as the serialisation is handled internally by phpBB.</div>
		<p>This allows for a large process to be paused and resumed, as the last known state will be deserialised when <code class="inline">enable_step()</code> is called again. This could be effected by the script redirecting on to itself as <code class="inline">enable_step()</code> will continue to be executed until such time as false is returned.</p>
		<p>Essentially, by extending the base class and overriding any of the available functions (<code class="inline">disable_step()</code> and <code class="inline">purge_step()</code> can be used in a similar way to <code class="inline">enable_step()</code> as mentioned above) the functionality is available to perform script execution in a series of steps.</p>
		<div class="note-box blue"><strong>Resources:</strong><br />
			<a href="{{ extensions_wiki_developing_extensions }}">Developing Extensions Wiki</a><br />
		</div>

		<hr />

		<h2 id="a-dependency-injection">Dependency Injection</h2>
		<p>A large portion of the phpBB 3.1 codebase is based on a fundamental mechanism, namely dependency injection. The goal is to not have to worry about managing the different dependencies of the components you want to use (e.g.: the database layer, the cache system or the current user object). It's also a means to cease using globally defined variables.</p>
		<p>As defined on Wikipedia: "The dependency injection (Dependency Injection) is a mechanism to implement the principle of inversion of control. It is to create dynamically (inject) the dependencies between different classes based on a description (metadata or configuration file) or programmatically. And dependencies between software components are not expressed in the code statically but determined dynamically at runtime."</p>
		<p>In phpBB 3.1 this has been implemented using the Symfony DependencyInjection Component. All services provided by phpBB are defined in a YAML format file at <code class="inline">/config/services.yml</code>. Extensions can use the services defined by phpBB as well as define their own services for their PHP classes in their own <code class="inline">config/</code> directory.</p>
		<p>In the case of the Acme Demo's <samp>main.php</samp> file, which requires the $config, $template, $user and $controller_helper global variables (aka services), the YAML code looks like:</p>
		<pre class="codesnippet">services:
    acme.demo.controller:
        class: acme\demo\controller\main
        arguments:
            - '@config'
            - '@controller.helper'
            - '@template'
            - '@user'</pre>
		<p>Note that <code class="inline">acme.demo.controller</code> is the unique service name for the <samp>main.php</samp> class. This name can be whatever you want, but phpBB extensions should preface them with the vendor and extension name (in this case, acme.demo) to prevent potential conflicts with other extensions or core services. The class is simply the name-spaced path to the <samp>main.php</samp> file. The arguments are the service dependencies required by the class. It is important that the order of the services listed here exactly match the order of these services as arguments in the <samp>main.php</samp> constructor. It is also recommended that any argument beginning with <code class="inline">@</code> or <code class="inline">%</code> symbols be wrapped in single quotes.</p>
		<p>Most PHP files in an extension should use the dependency injection model with service definitions, particularly controllers and event listeners. The exceptions to this are any ACP files, language files and migration files (which do not currently use the service container).</p>
		<div class="note-box blue"><strong>Resources:</strong><br />
			<a href="{{ extensions_wiki_dependency_injection }}">Dependency Injection Container Wiki</a><br />
			<a href="http://symfony.com/doc/2.3/components/dependency_injection/introduction.html">Symfony: The DependencyInjection Component</a><br />
		</div>

		<h2 class="title" id="a-controllers">Controllers</h2>
		<p>For all extensions that are to display a user interface, the core functionality for an extension needs to be included in controller files. Controller files may be placed anywhere inside an extension’s directory structure, although for optimal organisation it is best to place them either in the root of an extension or in a separate directory named <code class="inline">controller/</code> as in the Acme Demo extension. Controller files may also be given any name, such as <samp>main.php</samp> in the Acme Demo.</p>
		<p>The main function is typically called <code class="inline">handle()</code>. This is a function whose purpose is to handle the request to display pages. There is no need to declare the standard phpBB globals ($user, $db, etc.) by virtue of this being handled by dependency injection. All global variables have been defined in the <samp>main.php</samp> class constructor and most importantly, in the services definition file found in <code class="inline">config/services.yml</code>.</p>
		<p>A controller should never call <code class="inline">trigger_error()</code> to generate output. Instead, a controller must return an instance of <code class="inline">Symfony\Component\HttpFoundation\Response</code> or throw an exception. This is easily achieved by using the <code class="inline">render()</code> method in the controller_helper class when you are ready to render data to the template file, e.g.:</p>
		<pre class="codesnippet">return $controller_helper->render('demo_body.html', $name);</pre>
		<h3 id="a-routing">Routing</h3>
		<p>One final aspect of controller files is accessing them from a URL. The routing YAML file allows us to define URLs with various patterns leading to controller classes, and/or to specific methods within controller classes.</p>
		<p>The Acme Demo page is accessed from <code class="inline">./app.php/demo</code> (all extension controller files are accessed via <code class="inline">app.php</code>). The <code class="inline">routing.yml</code> (also located in the <code class="inline">config/</code> directory), allows us to define the URLs that will access our controller files. The YAML code for this looks like:</p>
		<pre class="codesnippet">acme_demo_controller:
    path: /demo/{name}
    defaults: { _controller: acme.demo.controller:handle }</pre>
		<p>A route is composed of three essential elements:
			<ul>
				<li>The Route name, <code class="inline">acme_demo_controller</code>, is a unique name for this routing, and can be named whatever you want (like services, it should be prefaced with the vendor and extension name). This name is used by the controller_helper class to generate the link to this routing, by calling <code class="inline">$controller_helper->route(‘acme_demo_controller’)</code>.</li>
				<li>The path is used to define what the URL should look like after <code class="inline">app.php</code>, in this case <code class="inline">/demo/{name}</code> where <code class="inline">{name}</code> is a URL parameter variable. For example, the URL <code class="inline">./app.php/demo/hello</code> would be similar to <code class="inline">./app.php/demo?name=hello</code>. The path may contain multiple variable parameters (in brackets). Note that prior to Symfony 2.2, "pattern" was used instead of "path". Currently Symfony supports using "path" or "pattern" but the former is preferred as the latter will eventually be removed from Symfony.</li>
				<li>The defaults definition specifies that the <code class="inline">acme_demo_controller</code> route should point to the <code class="inline">handle()</code> method in our <code class="inline">acme.demo.controller</code> service, and pass any <code class="inline">{name}</code> URL parameter to the <code class="inline">handle()</code> method (you can see the handle method accepts <code class="inline">$name</code> as an argument).</li>
			</ul>
		</p>
		<p>The routing.yml can hold multiple route definitions for multiple URLs, as may be required by the needs of your extension. Routes are compared in the order of their declaration in your routing.yml file, which is important to consider when defining your routes. If a pattern does not match any route a 404 error is returned.</p>
		<p>As noted above, the controller_helper class helps us to build the URL to our controller page which can be added to the Nav Bar as a clickable link using a template event, for example. To generate the URL for our controller we call on the <code class="inline">route()</code> method, and pass it any URL parameters as an array. The Acme Demo defined the variable <code class="inline">name</code> as a parameter, so we can pass it a value in the following manner:</p>
		<pre class="codesnippet">$controller_helper->route('acme_demo_controller', array('name' => 'world'))</pre>
		<p>By assigning the above line to a template var in the event listener, the link becomes available for injection into phpBB's nav bar using a template event.</p>
		<div class="note-box yellow"><strong>Reminder:</strong> All extension service names and route names should be prefixed with your vendor name and extension name.</div>
		<div class="note-box blue"><strong>Resources:</strong><br />
			<a href="{{ extensions_docs_controller }}">Controller Tutorial</a><br />
			<a href="{{ extensions_wiki_controller }}">Controller Wiki</a><br />
			<a href="http://symfony.com/doc/current/book/routing.html">Symfony: Routing</a><br />
			<a href="http://symfony.com/doc/2.3/components/routing/introduction.html">Symfony: The Routing Component</a><br />
		</div>

		<hr />

		<h2 class="title" id="a-including">Including PHP Files</h2>
		<p>As part of phpBB's shift towards widespread use of object orientation, it is advisable for developers to make use of classes to organise data where appropriate. Although the Acme Demo extension does not use included files, more complex extensions are encouraged to store related functions in classes, and classes in their own files.</p>
		<p>Separate class files from the controller class are encouraged, and using object orientation, they can be called upon within the controller file(s) as needed. In addition, properly name-spaced classes are auto-loaded by phpBB, meaning that accessor functions do not need to be made for them to be accessible to other classes.</p>
		<p>The naming of classes is important for consistency. All classes should be name-spaced and have a direct class to path name mapping; in other words the namespace and class name must be inclusive of the directory structure. For example:</p>
		<pre class="codesnippet">&lt;?php

namespace acme\demo\controller;

class main
{
}
</pre>
		<p>The above namespaced code would be for a class file and path structure such as <code class="inline">acme/demo/controller/main.php</code>.</p>
		<div class="note-box blue"><strong>Note:</strong> The phpBB 3.1 <a href="{{ extensions_phpbb_cgs }}">coding guidelines</a> states that the closing <code class="inline">?&gt;</code> is not required in PHP files, and all files should contain one extra blank line at the bottom.</div>
		<p>One final note about including PHP files regarding the use of the <code class="inline">IN_PHPBB</code> test. PHP files that contain only classes are not required to use the <code class="inline">IN_PHPBB</code> test. However, if your PHP files contain any executable code not encapsulated within a class structure, such as exposed functions, <code class="inline">include()</code> or <code class="inline">require()</code> statements, then the <code class="inline">IN_PHPBB</code> test is required prior to any executable code.</p>
		<pre class="codesnippet">&lt;?php

if (!defined('IN_PHPBB'))
{
   exit;
}

include(somefile.php);

function do_something ()
{
   // do something
}
</pre>

		<hr />

		<h2 class="title" id="a-template-files">Template Files</h2>
		<p>Templating for extensions is no different to templating for phpBB3 in general. phpBB 3.1 has switched to the TWIG template engine but retains phpBB’s original templating syntax. Therefor, both phpBB and TWIG template syntaxes are permissible in an extension. If you are not familiar with TWIG, you may use phpBB’s syntax (phpBB 3.1’s core template files are all written using phpBB syntax).</p>
		<p>An extension can contain two types of template files: custom templates and <a href="#a-template-events">template events</a>. An extension's custom template files should have unique names, preferably prefixed with the vendor and extension names, to prevent conflicts with other extension or phpBB template files. In addition to templates, an extension can contain theme files (CSS scripts and images), Javascript files and other assets.</p>
		<p>Like language files, template files in an extension should be organised in a fashion similar to phpBB’s template file structure. The <code class="inline">styles/</code> directory should contain directories for each style you have written template files for. For example, prosilver and subsilver2. Any style that inherits from prosilver, will inherit from your extension’s prosilver directory as well. A special <code class="inline">all/</code> directory can also be used to contain template files that can be used with any and all styles (a common JS file, for example). Template files for the ACP should be stored in the <code class="inline">adm/style/</code> location, similar to phpBB’s structure.</p>
		<p>An example directory structure for an extension with universal (all) files and theme specific files:</p>
		<pre class="codesnippet">
styles/
	all/
		template/
			acme_demo_body.html
			event/
				overall_header_head_append.html
		theme/
			css/
				acme_demo_main.css
			images/
				acme_demo_image.png
	prosilver/
		template/
			event/
				overall_header_navigation_append.html
	subsilver2/
		template/
			event/
				overall_header_navigation_append.html
</pre>
		<p>The custom template files are those used by an extension, typically by the front-facing controller files. Linking a custom template file to the controller is handled by the controller_helper’s render() method:</p>
		<pre class="codesnippet">return $controller_helper->render('demo_body.html', $name);</pre>
		<p>The first argument is the name of the template file, and the optional second argument is the page title. In this example, the <code class="inline">demo_body.html</code> template file is located in <code class="inline">acme/demo/styles/prosilver/template/</code> (for prosilver).</p>
		<p>For the ACP template, things are handled using coding familiar to MOD authors. The ACP template file <code class="inline">demo_body.html</code> is located in <code class="inline">acme/demo/adm/style/</code> and is loaded in the <code class="inline">acp/main_module.php</code> by:</p>
		<pre class="codesnippet">$user->add_lang('acp/common');
$this->tpl_name = 'demo_body';
$this->page_title = $user->lang('ACP_DEMO_TITLE');</pre>
		<p>See the section below on <a href="#a-template-events">template events</a> to learn how to inject new template code into core phpBB template files, and how to include any JavaScript and CSS files.</p>
		<div class="note-box yellow"><strong>Note:</strong> If a standard phpBB template filename is used as an extension template, then this will override the template file from phpBB. Therefore it is important to be mindful of this when naming template files. Overriding template files is not advisable for publicly released extensions as it could conflict with other extensions.</div>
		<div class="note-box blue"><strong>Resources:</strong><br />
			<a href="http://twig.sensiolabs.org/">TWIG Template Engine</a> at Sensio Labs<br />
			<a href="{{ extensions_wiki_helper_class }}">Controller Helper Class Wiki</a><br />
			<a href="{{ extensions_validation_policy }}/#templates">Template Validation Policy</a><br />
		</div>

		<hr />

		<h2 class="title" id="a-language-files">Language Files</h2>
		<p>Language entries can be included with the extension, but to reference the correct language file the <code class="inline">add_lang_ext()</code> function needs to be called. It takes two arguments, the first being the vendor/package and the second being the name of the language file (the PHP file) or an array of language file names.</p>
		<pre class="codesnippet">// Add language file common.php
$this->user->add_lang_ext(‘acme/demo’, ‘common’);</pre>
		<p>The above would load <code class="inline">acme/demo/language/en/common.php</code> (for an English language file).</p>
		<pre class="codesnippet">// Add language files common.php and controller.php
$this->user->add_lang_ext(‘acme/demo’, array(‘common’, ‘controller’));</pre>
		<p>The above would load the two corresponding language files:<br /><code class="inline">acme/demo/language/en/common.php</code><br /><code class="inline">acme/demo/language/en/controller.php</code></p>
		<p>It is preferred to use the above method to load language files at any point in your extension’s code execution where the language keys are needed. However, if it is neccessary to load an extension's language keys globally, so they are available at all times, the <code class="inline">core.user_setup</code> event should be used.</p>
		<div class="note-box green"><strong>Pro-Tip:</strong> Language files can be given any name. However, language files that start with <code class="inline">permissions_</code> or <code class="inline">info_acp_</code> will be automatically loaded within the ACP for permission and ACP module name variables, respectively, and do not need to be loaded using the previously discussed functions or events.</div>

		<hr />

		<h2 class="title" id="a-modifying">Modifying Existing Functionality</h2>
		<p>phpBB 3.1 uses a system of events to allow extensions the ability to modify existing functionality by inserting new code and/or modifying variables throughout the codebase and template files. There are two types of events: core events and template events.</p>

		<h3 id="a-core-events">Core events</h3>
		<p>Core events allow extensions to hook into phpBB’s PHP code at specific locations. These events often provide variables from the core that can be used and modified by the extension, or events can be used simply as a means to inject some additional PHP code. Extensions do this by using event listeners, located in an <code class="inline">events/</code> directory.</p>
		<p>For example, the Acme Demo needs to add a link for its controller page to the header's navbar, next to the FAQ link. In <code class="inline">main_listener.php</code> there is a method called <code class="inline">add_page_header_link()</code> that has been subscribed to the <code class="inline">core.page_header</code> event. This method receives as its argument an <code class="inline">$event</code> variable, an array of all the variables from the <code class="inline">core.page_header</code> event which can be used and modified. For this example we do not need to do anything other than create a new template variable for our link that will be inserted into the core at this event location.</p>
		<p>The <code class="inline">load_language_on_setup()</code> method in the <code class="inline">main_listener.php</code> is an example where the <code class="inline">$event</code> data passed to it is manipulated, in order to add additional language file data to the <code class="inline">core.user_setup event</code>.</p>
		<p><a href="{{ extension_wiki_events_list }}">View a list of available core events.</a></p>

		<h3 id="a-template-events">Template events</h3>
		<p>Template events allow extensions to insert template code into event locations found throughout the template structure. Template events found inside phpBB’s template files look like:</p>
		<pre class="codesnippet">&lt;!-- EVENT overall_header_head_append --&gt;</pre>
		<p>To use a template event, simply name your template file exactly the same as the template event you want to use, and place your template event files in an <code class="inline">event/</code> directory inside your style’s template directory.</p>
		<p>For example, the above template event could be used to add some CSS style script to the header. The template file would be located at:</p>
		<pre class="codesnippet">acme/demo/styles/prosilver/template/event/overall_header_head_append.html</pre>
		<p>Note: When a template event can be used by all styles, it should be placed in the <code class="inline">all/</code> style directory. This helps prevent code duplication and eases style file management. The prosilver and subsilver directories should be used for template events that must be custom tailored to each style. Similarly, if a custom 3rd-party style requires additional customisation to maintain compatibility with the style, a folder for that style should be included with those events.</p>
		<p>It's also important to understand that when phpBB compiles the templates, there is no current system for determining the priority in which template events are compiled. In rare cases some extensions could cause a conflict, in which case the reccomendation is for the extension authors to work out a solution for their conflicting template events.</p>
		<p><a href="{{ extension_wiki_events_list }}">View a list of available template events.</a></p>
		<div class="note-box green"><strong>Pro-Tip:</strong> phpBB’s core PHP and template files have been prepared with dozens of event locations. However, if there are no events where your extension may need one, the phpBB development team welcomes event requests at the <a href="{{ DEV_HOME_SUB }}">area51.com</a> [3.x] Event Requests forum.</div>

		<h3 id="a-includejs-css">Including JavaScript and CSS Scripts</h3>
		<p>A special case for including CSS files and JS files exists. These use the <code class="inline">&lt;!-- INCLUDECSS --&gt;</code> and <code class="inline">&lt;!-- INCLUDEJS --&gt;</code> syntax, respectively.</p>
		<p>The INCLUDECSS tag will automatically generate a &lt;link&gt; tag for the supplied CSS file in the template &lt;head&gt; section. For example, to add a new <code class="inline">custom.css</code> file in prosilver, a template event would need to be created at:</p>
		<pre class="codesnippet">acme/demo/styles/prosilver/template/event/overall_header_head_append.html</pre>
		<p>It would contain the following line of code:</p>
		<pre class="codesnippet">&lt;!-- INCLUDECSS @acme_demo/custom.css --&gt;</pre>
		<p>The INCLUDEJS tag will automatically generate a &lt;script&gt; tag for the supplied JS file in the footer of the template. For example, to include a JS file in all styles, e.g.: <code class="inline">acme/demo/styles/all/js/scripts.js</code></p>
		<p>A template event would typically be created at:</p>
		<pre class="codesnippet">acme/demo/styles/all/template/event/overall_footer_after.html</pre>
		<p>It would contain the following line of code:</p>
		<pre class="codesnippet">&lt;!-- INCLUDEJS @acme_demo/js/scripts.js --&gt;</pre>
		<p>Notice the <code class="inline">@acme_demo</code> prefix. This points phpBB's finder to the template and theme directories of the acme demo styles folders when used with INCLUDEJS and INCLUDECSS, respectively.</p>
		<p>When including JavaScript/CSS libraries and frameworks such as jQuery-UI or Font Awesome, the potential for resource overlap between extensions can be mitigated using a simple work-around endorsed by the phpBB Extensions Team. Using the the <code class="inline">&lt;!-- DEFINE --&gt;</code> tag you should test if the script your extension wants to include is already defined, and if not, then include your script and define the script. For example:</p>
		<pre class="codesnippet">
&lt;!-- IF not $INCLUDED_JQUERYUIJS --&gt;
	&lt;!-- INCLUDEJS jquery-ui.js --&gt;
	&lt;!-- DEFINE $INCLUDED_JQUERYUIJS = true --&gt;
&lt;!-- ENDIF --&gt;</pre>
		<p>Some example template variable definitions to use with common libraries (the common practice should be to name the variable definition after the library filename, e.g.: <samp>highslide.js</samp> becomes <samp>HIGHSLIDEJS</samp>):<br />
			<ol class="list-margin" type="a">
				<li>HighSlide JS: <code class="inline">$INCLUDED_HIGHSLIDEJS</code></li>
				<li>Font Awesome CSS: <code class="inline">$INCLUDED_FONTAWESOMECSS</code></li>
				<li>ColorBox JS: <code class="inline">$INCLUDED_COLORBOXJS</code></li>
				<li>ColPick JS: <code class="inline">$INCLUDED_COLPICKJS</code></li>
				<li>MoTools JS: <code class="inline">$INCLUDED_MOTOOLSJS</code></li>
				<li>Dojo JS: <code class="inline">$INCLUDED_DOJOJS</code></li>
				<li>Angular JS: <code class="inline">$INCLUDED_ANGULARJS</code></li>
			</ol>
			</p>
		<div class="note-box yellow"><strong>Note:</strong> The INCLUDECSS tag will only work inside the overall_header_head_append event. However, the INCLUDEJS tag can be used in any template event or custom template file.</div>
		<div class="note-box blue"><strong>Resources:</strong><br />
			<a href="{{ extensions_docs_php_events }}">PHP Events Tutorial</a><br />
			<a href="{{ extensions_docs_html_events }}">HTML Events Tutorial</a><br />
			<a href="{{ extensions_wiki_template_listeners }}">Template Events Wiki</a><br />
			<a href="{{ extensions_validation_policy }}/#templates">Template Validation Policy</a><br />
			<a href="{{ extensions_validation_policy }}/#scripts">JavaScript and CSS Validation Policy</a>
		</div>
		<hr />

		<h2 class="title" id="a-migrations">Migrations and the Database</h2>
		<p>Migrations are a new way of facilitating database changes, much in the same way UMIL was used in phpBB 3.0. Through Migrations, developers will be able to handle processes such as creating new tables or adding new permissions and other data to the database.</p>
		<p>Migrations have two primary methods for facilitating database changes: <code class="inline">update_schema()</code> and <code class="inline">update_data()</code>. As their names suggest, <code class="inline">update_schema()</code> is for facilitating schema changes, such as adding new tables, columns and fields. The <code class="inline">update_data()</code> method is for inserting, updating and dropping field data. Each of these methods also has a <code class="inline">revert_</code> method to specify the changes to be made during the purge step of removing an extension. The <code class="inline">update_data()</code> method is automatically reverted during a purge step, though there may be times where additional changes may need to be defined using the <code class="inline">revert_data()</code> method. The <code class="inline">revert_schema()</code> method should always be including to revert any changes introduced by the <code class="inline">update_schema()</code> method.</p>
		<p>There are a few migration tools to facilitate database changes:</p>
		<h3 id="a-config-tool">Config tool</h3>
		<p>The config tool helps adding, updating, and removing config settings.</p>
		<pre class="codesnippet">public function update_data()
{
   return array(
      array('config.add’, array('acme_demo_goodbye', 0)),
   );
}</pre>
		<h3 id="a-module-tool">Module tool</h3>
		<p>The module tool helps adding and removing modules (ACP, MCP, UCP modules).</p>
		<pre class="codesnippet">public function update_data()
{
   return array(
      array('module.add', array(
         'acp',
         'ACP_CAT_DOT_MODS',
         'ACP_CAT_TEST_MOD'
      )),
      array('module.add', array(
         'acp',
         'ACP_CAT_TEST_MOD',
         array(
            'module_basename' => '\acme\demo\acp\main_module',
            'modes'           => array('settings'),
         ),
      )),
   ));
}</pre>
		<h3 id="a-permission-tool">Permission tool</h3>
		<p>The permission tool helps adding, removing, setting, and unsetting permissions and adding or removing permission roles.</p>
		<pre class="codesnippet">public function update_data()
{
   return array(
      array('permission.add', array('a_new')),
}</pre>
		<h3 id="a-config-text-tool">Config Text tool</h3>
		<p>The config_text tool helps adding, updating, and removing config_text settings. The config_text table is used to store options with an arbitrary length value in a TEXT column. In contrast to config values, config_text are not cached or prefetched.</p>
		<pre class="codesnippet">public function update_data()
{
   return array(
      array('config_text.add', array('foo', 'bar')),
   );
}</pre>
		<p>Migrations have two additional important methods to facilitate running them in the correct sequential order and prevent overwriting existing data:</p>
		<h3 id="a-depends-on">depends_on()</h3>
		<p>The <code class="inline">depends_on()</code> method is used to define a migration's dependencies. Dependencies tell the migrator what order migrations must be installed in. In the Acme Demo migration files, the release_1_0_1 migration depends on release_1_0_0. This is set in the release_1_0_1 <code class="inline">depends_on()</code> method:</p>
		<pre class="codesnippet">static public function depends_on()
{
   return array('\acme\demo\migrations\release_1_0_0');
}</pre>
		<h3 id="a-effectively-installed">effectively_installed()</h3>
		<p>The <code class="inline">effectively_installed()</code> method is used primarily to help transition from a previous database installer method (such as a MOD that used UMIL) to migrations. If it returns true, the migration is marked as installed without applying any changes. In the following example the migration file would not be applied if the specified config value already exists in the database:</p>
		<pre class="codesnippet">public function effectively_installed()
{
   return isset($this->config['acme_demo_goodbye']);
}</pre>
		<div class="note-box blue"><strong>Resources:</strong><br />
			<a href="{{ extensions_docs_migrations }}">Migrations Documentation</a><br />
			<a href="{{ extensions_docs_migrations }}getting_started.html">Getting started with Migrations</a><br />
			<a href="{{ extensions_docs_migrations }}tools/">Migration Tools</a><br />
			<a href="{{ extensions_validation_policy }}/#migrations">Migrations Validation Policy</a><br />
		</div>

		<hr />

		<h2 class="title" id="a-permissions">Permissions</h2>
		<p>Adding new permissions for an extension is an easy three-step process. There are four permission types: Administrator, Moderator, User and Forum (<code class="inline">a_</code>, <code class="inline">m_</code>, <code class="inline">u_</code> and <code class="inline">f_</code>). You can create new permissions for each of these types and assign them to user groups or permission roles. You can also define new roles to assign your permissions to if desired.</p>
		<p>First, create the permissions in a migration using the <a href="#a-permission-tool">Permissions tool</a>. It helps adding, removing, setting, and unsetting permissions and adding or removing permission roles. For example, to add a new user permission and set it to the registered user group and also add it to the standard user role:</p>
		<pre class="codesnippet">return array(
	array('permission.add', array('u_foo_bar')),
	array('permission.permission_set', array('REGISTERED', 'u_foo_bar', 'group')),
	array('permission.permission_set', array('ROLE_USER_STANDARD', 'u_foo_bar')),
);</pre>
		<p>Next, use the <code class="inline">core.permissions</code> event to hook your new permissions into phpBB's permissions system. All that is required in this event is to add your permission to the event's permission data array. The array uses the permission name as its key with an array assigned to it defining the language key and the category the permission should be displayed in, for example:</p>
		<pre class="codesnippet">$permissions = $event['permissions'];
$permissions['u_foo_bar'] = array('lang' => 'ACL_U_FOOBAR', 'cat' => 'misc');
$event['permissions'] = $permissions;</pre>
		<p>Finally, you need to define the permission's language key(s). Simply put them in a language file that starts with <code class="inline">permissions_</code>, and they will be automatically loaded within the ACP. For example, the file <code class="inline">permission_foobar.php</code> would contain the following language key definition:</p>
		<pre class="codesnippet">$lang = array_merge($lang, array(
	'ACL_U_FOOBAR' => 'Can view foobar',
));</pre>
		<div class="note-box blue"><strong>Resources:</strong><br />
			<a href="{{ extensions_docs_migrations }}tools/permission.html">Migrations Permissions Tool</a><br />
		</div>

		<hr />

		<h2 class="title" id="a-resources">Additional Resources</h2>
		<p>We hope you found this extension writing tutorial informative and helpful. There are still many more resources to help you develop great extensions that will expand the possibilities of what phpBB can do for your community and the many more communities that may adopt and benefit from your extensions.</p>
		<p>
			<a href="{{ extensions_docs }}">Extensions Tutorials</a><br />
			<a href="{{ extensions_wiki }}">Extensions Wiki</a><br />
			<a href="{{ forum_extensions_31x_dev }}">Extensions in Development Forum</a><br />
			<a href="{{ forum_extensions_31x_writers }}">Extension Writers Forum</a><br />
			<a href="{{ extensions_validation_policy }}">Extension Validation Policy</a><br />
			<a href="{{ extensions_phpbb_cgs }}">Coding Guidelines</a>
		</p>

		<br />

	</div>

	<div id="extras">
		{{ include('AppBundle:Extensions:menu.html.twig') }}
		<div class="mini-panel js-sections js-scroll" style="display: none"></div>
	</div>
</div>
{% endblock %}
